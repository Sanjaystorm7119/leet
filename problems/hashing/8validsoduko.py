class Solution:
    def valid_soduko(self , board : list[list[int]]) -> bool :
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        grid = [set() for _ in range(9)]

        for row in range(9) :
            for col in range(9):
                num = board[row][col]
                if num == ".":
                    continue
                grid_ind = (row//3) * 3 + (col//3)

                if num in rows[row] or num in cols[col] or num in grid[grid_ind]:
                    return False
                rows[row].add(num)
                cols[col].add(num)
                grid[grid_ind].add(num)
        
        return True
ans = Solution()
print(ans.valid_soduko([
 ["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
))

print(ans.valid_soduko([
["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]
]
))

